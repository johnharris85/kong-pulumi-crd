// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import {ObjectMeta} from "../meta/v1";

export namespace configuration {
    export namespace v1 {
        /**
         * ConfigFrom references a secret containing the plugin configuration.
         */
        export interface KongClusterPluginConfigFrom {
            /**
             * NamespacedSecretValueFromSource represents the source of a secret value specifying the secret namespace
             */
            secretKeyRef?: outputs.configuration.v1.KongClusterPluginConfigFromSecretKeyRef;
        }

        /**
         * NamespacedSecretValueFromSource represents the source of a secret value specifying the secret namespace
         */
        export interface KongClusterPluginConfigFromSecretKeyRef {
            /**
             * the key containing the value
             */
            key: string;
            /**
             * the secret containing the key
             */
            name: string;
            /**
             * The namespace containing the secret
             */
            namespace: string;
        }

        export interface KongIngressProxy {
            connect_timeout?: number;
            path?: string;
            protocol?: string;
            read_timeout?: number;
            retries?: number;
            write_timeout?: number;
        }

        /**
         * Route represents a Route in Kong. Read https://getkong.org/docs/0.13.x/admin-api/#Route-object
         */
        export interface KongIngressRoute {
            headers?: {[key: string]: string[]};
            https_redirect_status_code?: number;
            methods?: string[];
            path_handling?: string;
            preserve_host?: boolean;
            protocols?: string[];
            regex_priority?: number;
            /**
             * Kong buffers requests and responses by default. Buffering is not always desired, for instance if large payloads are being proxied using HTTP 1.1 chunked encoding. 
             *  The request and response route buffering options are enabled by default and allow the user to disable buffering if desired for their use case. 
             *  SEE ALSO: - https://github.com/Kong/kong/pull/6057 - https://docs.konghq.com/2.2.x/admin-api/#route-object
             */
            request_buffering?: boolean;
            response_buffering?: boolean;
            snis?: string[];
            strip_path?: boolean;
        }

        /**
         * Upstream represents an Upstream in Kong.
         */
        export interface KongIngressUpstream {
            algorithm?: string;
            hash_fallback?: string;
            hash_fallback_header?: string;
            hash_on?: string;
            hash_on_cookie?: string;
            hash_on_cookie_path?: string;
            hash_on_header?: string;
            /**
             * Healthcheck represents a health-check config of an upstream in Kong.
             */
            healthchecks?: outputs.configuration.v1.KongIngressUpstreamHealthchecks;
            host_header?: string;
            slots?: number;
        }

        /**
         * Healthcheck represents a health-check config of an upstream in Kong.
         */
        export interface KongIngressUpstreamHealthchecks {
            /**
             * ActiveHealthcheck configures active health check probing.
             */
            active?: outputs.configuration.v1.KongIngressUpstreamHealthchecksActive;
            /**
             * PassiveHealthcheck configures passive checks around passive health checks.
             */
            passive?: outputs.configuration.v1.KongIngressUpstreamHealthchecksPassive;
            threshold?: number;
        }

        /**
         * ActiveHealthcheck configures active health check probing.
         */
        export interface KongIngressUpstreamHealthchecksActive {
            concurrency?: number;
            /**
             * Healthy configures thresholds and HTTP status codes to mark targets healthy for an upstream.
             */
            healthy?: outputs.configuration.v1.KongIngressUpstreamHealthchecksActiveHealthy;
            http_path?: string;
            timeout?: number;
            type?: string;
            /**
             * Unhealthy configures thresholds and HTTP status codes to mark targets unhealthy.
             */
            unhealthy?: outputs.configuration.v1.KongIngressUpstreamHealthchecksActiveUnhealthy;
        }

        /**
         * Healthy configures thresholds and HTTP status codes to mark targets healthy for an upstream.
         */
        export interface KongIngressUpstreamHealthchecksActiveHealthy {
            http_statuses?: number[];
            interval?: number;
            successes?: number;
        }

        /**
         * Unhealthy configures thresholds and HTTP status codes to mark targets unhealthy.
         */
        export interface KongIngressUpstreamHealthchecksActiveUnhealthy {
            http_failures?: number;
            http_statuses?: number[];
            interval?: number;
            tcp_failures?: number;
            timeout?: number;
        }

        /**
         * PassiveHealthcheck configures passive checks around passive health checks.
         */
        export interface KongIngressUpstreamHealthchecksPassive {
            /**
             * Healthy configures thresholds and HTTP status codes to mark targets healthy for an upstream.
             */
            healthy?: outputs.configuration.v1.KongIngressUpstreamHealthchecksPassiveHealthy;
            /**
             * Unhealthy configures thresholds and HTTP status codes to mark targets unhealthy.
             */
            unhealthy?: outputs.configuration.v1.KongIngressUpstreamHealthchecksPassiveUnhealthy;
        }

        /**
         * Healthy configures thresholds and HTTP status codes to mark targets healthy for an upstream.
         */
        export interface KongIngressUpstreamHealthchecksPassiveHealthy {
            http_statuses?: number[];
            interval?: number;
            successes?: number;
        }

        /**
         * Unhealthy configures thresholds and HTTP status codes to mark targets unhealthy.
         */
        export interface KongIngressUpstreamHealthchecksPassiveUnhealthy {
            http_failures?: number;
            http_statuses?: number[];
            interval?: number;
            tcp_failures?: number;
            timeout?: number;
        }

        /**
         * ConfigFrom references a secret containing the plugin configuration.
         */
        export interface KongPluginConfigFrom {
            /**
             * SecretValueFromSource represents the source of a secret value
             */
            secretKeyRef?: outputs.configuration.v1.KongPluginConfigFromSecretKeyRef;
        }

        /**
         * SecretValueFromSource represents the source of a secret value
         */
        export interface KongPluginConfigFromSecretKeyRef {
            /**
             * the key containing the value
             */
            key: string;
            /**
             * the secret containing the key
             */
            name: string;
        }
    }

    export namespace v1beta1 {
        /**
         * TCPIngressSpec defines the desired state of TCPIngress
         */
        export interface TCPIngressSpec {
            /**
             * A list of rules used to configure the Ingress.
             */
            rules?: outputs.configuration.v1beta1.TCPIngressSpecRules[];
            /**
             * TLS configuration. This is similar to the `tls` section in the Ingress resource in networking.v1beta1 group. The mapping of SNIs to TLS cert-key pair defined here will be used for HTTP Ingress rules as well. Once can define the mapping in this resource or the original Ingress resource, both have the same effect.
             */
            tls?: outputs.configuration.v1beta1.TCPIngressSpecTls[];
        }

        /**
         * IngressRule represents a rule to apply against incoming requests. Matching is performed based on an (optional) SNI and port.
         */
        export interface TCPIngressSpecRules {
            /**
             * Backend defines the referenced service endpoint to which the traffic will be forwarded to.
             */
            backend: outputs.configuration.v1beta1.TCPIngressSpecRulesBackend;
            /**
             * Host is the fully qualified domain name of a network host, as defined by RFC 3986. If a Host is specified, the protocol must be TLS over TCP. A plain-text TCP request cannot be routed based on Host. It can only be routed based on Port.
             */
            host?: string;
            /**
             * Port is the port on which to accept TCP or TLS over TCP sessions and route. It is a required field. If a Host is not specified, the requested are routed based only on Port.
             */
            port?: number;
        }

        /**
         * Backend defines the referenced service endpoint to which the traffic will be forwarded to.
         */
        export interface TCPIngressSpecRulesBackend {
            /**
             * Specifies the name of the referenced service.
             */
            serviceName: string;
            /**
             * Specifies the port of the referenced service.
             */
            servicePort: number;
        }

        /**
         * IngressTLS describes the transport layer security.
         */
        export interface TCPIngressSpecTls {
            /**
             * Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
             */
            hosts?: string[];
            /**
             * SecretName is the name of the secret used to terminate SSL traffic.
             */
            secretName?: string;
        }

        /**
         * TCPIngressStatus defines the observed state of TCPIngress
         */
        export interface TCPIngressStatus {
            /**
             * LoadBalancer contains the current status of the load-balancer.
             */
            loadBalancer?: outputs.configuration.v1beta1.TCPIngressStatusLoadBalancer;
        }

        /**
         * LoadBalancer contains the current status of the load-balancer.
         */
        export interface TCPIngressStatusLoadBalancer {
            /**
             * Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
             */
            ingress?: outputs.configuration.v1beta1.TCPIngressStatusLoadBalancerIngress[];
        }

        /**
         * LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
         */
        export interface TCPIngressStatusLoadBalancerIngress {
            /**
             * Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
             */
            hostname?: string;
            /**
             * IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
             */
            ip?: string;
            /**
             * Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
             */
            ports?: outputs.configuration.v1beta1.TCPIngressStatusLoadBalancerIngressPorts[];
        }

        export interface TCPIngressStatusLoadBalancerIngressPorts {
            /**
             * Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use   CamelCase names - cloud provider specific error values must have names that comply with the   format foo.example.com/CamelCase. --- The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            error?: string;
            /**
             * Port is the port number of the service port of which status is recorded here
             */
            port: number;
            /**
             * Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
             */
            protocol: string;
        }

        /**
         * UDPIngressSpec defines the desired state of UDPIngress
         */
        export interface UDPIngressSpec {
            /**
             * A list of rules used to configure the Ingress.
             */
            rules?: outputs.configuration.v1beta1.UDPIngressSpecRules[];
        }

        /**
         * UDPIngressRule represents a rule to apply against incoming requests wherein no Host matching is available for request routing, only the port is used to match requests.
         */
        export interface UDPIngressSpecRules {
            /**
             * Backend defines the Kubernetes service which accepts traffic from the listening Port defined above.
             */
            backend: outputs.configuration.v1beta1.UDPIngressSpecRulesBackend;
            /**
             * Port indicates the port for the Kong proxy to accept incoming traffic on, which will then be routed to the service Backend.
             */
            port: number;
        }

        /**
         * Backend defines the Kubernetes service which accepts traffic from the listening Port defined above.
         */
        export interface UDPIngressSpecRulesBackend {
            /**
             * Specifies the name of the referenced service.
             */
            serviceName: string;
            /**
             * Specifies the port of the referenced service.
             */
            servicePort: number;
        }

        /**
         * UDPIngressStatus defines the observed state of UDPIngress
         */
        export interface UDPIngressStatus {
            /**
             * LoadBalancer contains the current status of the load-balancer.
             */
            loadBalancer?: outputs.configuration.v1beta1.UDPIngressStatusLoadBalancer;
        }

        /**
         * LoadBalancer contains the current status of the load-balancer.
         */
        export interface UDPIngressStatusLoadBalancer {
            /**
             * Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
             */
            ingress?: outputs.configuration.v1beta1.UDPIngressStatusLoadBalancerIngress[];
        }

        /**
         * LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
         */
        export interface UDPIngressStatusLoadBalancerIngress {
            /**
             * Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
             */
            hostname?: string;
            /**
             * IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
             */
            ip?: string;
            /**
             * Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
             */
            ports?: outputs.configuration.v1beta1.UDPIngressStatusLoadBalancerIngressPorts[];
        }

        export interface UDPIngressStatusLoadBalancerIngressPorts {
            /**
             * Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use   CamelCase names - cloud provider specific error values must have names that comply with the   format foo.example.com/CamelCase. --- The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
             */
            error?: string;
            /**
             * Port is the port number of the service port of which status is recorded here
             */
            port: number;
            /**
             * Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
             */
            protocol: string;
        }
    }
}
